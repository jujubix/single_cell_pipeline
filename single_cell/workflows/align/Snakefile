import os
import re
import sys
from single_cell.workflows.align.dtypes import dtypes
from single_cell.utils import inpututils

include: "metrics_subworkflow.smk"

rule align_reads:
    input:
        fastq1 = lambda wildcards: list([fastq1_files[(wildcards.cell_id, lane)] for lane in lanes]),
        fastq2 = lambda wildcards: list([fastq2_files[(wildcards.cell_id, lane)] for lane in lanes])
    params:
        laneinfo = lambda wildcards: list([laneinfo[(wildcards.cell_id, lane)] for lane in lanes]),
        sampleinfo = lambda wildcards: sampleinfo[wildcards.cell_id],
        ref_genome = ref_genome,
        aligner = alignment_config['aligner'],
        containers = alignment_config['docker'],
        adapter = alignment_config['adapter'],
        adapter2 = alignment_config['adapter2'],
        fastq_screen_params = alignment_config['fastq_screen_params'],
    output:
        sorted_markdups = os.path.join(bams_dir, '{cell_id}.bam'),
        sorted_markdups_bai = os.path.join(bams_dir, '{cell_id}.bam.bai'),
        tempdir = temp(directory('{cell_id}_alignment_temp')),
        reports = temp('{cell_id}_fastqc_reports.tar.gz'),
        fastqscreen_detailed_metrics = temp('{cell_id}_organism_detailed_count_per_cell.csv'),
        fastqscreen_summary_metrics = temp('{cell_id}_organism_summary_count_per_cell.csv')
    resources:
        mem = 7,
        ncpus = 1
    run:
        single_cell.workflows.align.align_tasks.align_lanes(
            input.fastq1, input.fastq2, output.sorted_markdups, output.reports,
            output.tempdir, params.ref_genome, params.laneinfo,
            params.sampleinfo, wildcards.cell_id, lib, paramsaligner,
            params.containers, params.adapter, params.adapter2,
            output.fastqscreen_detailed_metrics, output.fastqscreen_summary_metrics,
            params.fastq_screen_params
            )

rule merge_fastq_screen_metrics:
    input:
        all_detailed_counts = expand('{cell_id}_organism_detailed_count_per_cell.csv', cell_id = cell_id),
        all_summary_counts = expand('{cell_id}_organism_summary_count_per_cell.csv', cell_id = cell_id)
    output:
        merged_detailed_counts = alignment_files['fastqc_metrics_csv'],
        merged_detailed_counts_yaml = '{}.yaml'.format(alignment_files['fastqc_metrics_csv']),
        merged_summary_counts = temp('organism_summary_count_per_cell.csv')
    resources:
        mem = 7,
        ncpus = 1
    run:
        single_cell.workflows.align.fastqscreen.merge_fastq_screen_counts(
            input.all_detailed_counts, input.all_summary_counts,
            output.merged_detailed_counts, output.merged_summary_counts
            )

rule add_contamination_status:
    input:
        infile = 'alignment_metrics.csv',
    output:
        outfile = alignment_files['alignment_metrics_csv']
    params:
        reference = alignment_config.get('ref_type', 'grch37'),
        strict_validation = alignment_config.get('fastq_screen_params', True)
    resources:
        mem = alignment_config.get('memory', {}).get('med', 6),
        ncpus = 1
    run:
        single_cell.workflows.align.tasks.add_contamination_status(
        input.infile, output.outfile,
        reference=params.reference,
        strict_validation=params.strict_validation
        )

rule plot_metrics:
    input:
        alignment_metrics = alignment_files['alignment_metrics_csv'],
        gc_metrics = alignment_files['gc_metrics_csv']
    params:
        alignment_config['gc_windows']
    output:
        alignment_files['plot_metrics_output']
    resources:
        mem = alignment_config.get('memory', {}).get('med', 6),
        ncpus = 1
    run:
        single_cell.workflows.align.tasks.plot_metrics(
            input.alignment_metrics,
            output,
            'QC pipeline metrics',
            input.gc_metrics,
            params)

rule tar_all_files:
    input:
        expand('{cell_id}_fastqc_reports.tar.gz', cell_id = cell_id),
        expand('{cell_id}_markdups_metrics.txt', cell_id = cell_id),
        expand('{cell_id}_flagstat_metrics.txt', cell_id = cell_id),
        expand('{cell_id}_wgs_metrics.txt', cell_id = cell_id),
        expand('{cell_id}_gc_metrics.txt', cell_id = cell_id),
        expand('{cell_id}_gc_metrics_summary.txt', cell_id = cell_id),
        expand('{cell_id}_gc_metrics.pdf', cell_id = cell_id),
        expand('{cell_id}_insert_metrics.txt', cell_id = cell_id),
        expand('{cell_id}_insert_metrics.pdf', cell_id = cell_id)
    output:
        tar_output = alignment_files['alignment_metrics_tar'],
        tempdir = temp(directory('merge_metrics_tar'))
    resources:
        mem = alignment_config.get('memory', {}).get('med', 6),
        ncpus = 1
    run:
        single_cell.utils.helpers.tar_files(input, output.tar_output, tempdir)









